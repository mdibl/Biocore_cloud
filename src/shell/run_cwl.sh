#!/bin/sh

#
#
# This job triggers a given sample pipeline analysis as specified in the input cwl file and json file. 
# Users can also specify cwltool options to use

CWLTOOL=`which cwltool`
CURRENT_USER=`id -un`
source /etc/profile.d/biocore.sh 

date
script_name=`basename $0`

if [ ! -f ${CWLTOOL} ]
then
  echo "ERROR: cwltool not installed on `uname -n ` - see ${CWLTOOL}" 
  exit 1
fi
PIPELINE_CONFIG_FILE=$1
sample_id=$2
CWL_COMMAND_OPTIONS="--no-container --debug  --timestamps"

[ ! -z "$3" ] && CWL_COMMAND_OPTIONS=$3

if [[ -z "${PIPELINE_CONFIG_FILE}" || ! -f ${PIPELINE_CONFIG_FILE} || -z "$sample_id" ]]
then
   echo ""
   echo "****************************************************"
   echo "*      Running Pipeline's cwl script for $sample_id"
   echo "****************************************************"
   echo ""
   echo "This job triggers the pipeline analysis for the specified sampleID."
   echo "Users can also specify cwltool options to use. "
   echo ""
   echo "Usage: ./$script_name path2_pipeline.cfg sampleID [CWL_COMMAND_OPTIONS]"
   echo ""
   echo "Where:"
   echo "path2_pipeline.cfg: Required - is the full path to this pipeline config file."
   echo "       The pipeline config file is generated by running the program gen_config.sh"
   echo "sampleID:  Required - is the sample Id as found in the experiment design file."
   echo ""
   echo "CWL_COMMAND_OPTIONS:  optional(default: \"--no-container --debug  --timestamps\")"
   echo ""
   echo "Notes: The CWL_COMMAND_OPTIONS field if specified must be enclosed within \"\" double quotes."
   echo ""
   echo "Example:"
   echo "./$script_name /data/scratch/rna-seq/VootYin/vyin_010.zebrafish_cilia_2019/vyin_010.1560549433/cfgs/pipeline.cfg SL375052 \"--no-container --debug  --timestamps\""
   echo ""
   exit 1
fi
##############
#
#Tokens used to check the run status
ERROR_TERMS="ERROR error failed"
###############

source ${PIPELINE_CONFIG_FILE}
## 
log=$LOG_BASE/$script_name.$sample_id.log
[ -f $log ] && rm -f $log
touch $log

JSON_FILE=$PATH2_JSON_FILES/$sample_id.$ORGANISM.json
echo ""|tee -a $log

if [ ! -f ${CWL_SCRIPT} ]
then
  echo "ERROR: cwl script missing - see: $CWL_SCRIPT " | tee -a $log
  exit 1
fi
if [ ! -f ${JSON_FILE} ]
then
  echo "ERROR: json file for this sample missing - see $JSON_FILE" | tee -a $log 
  exit 1
fi
if [ ! -d ${RESULTS_DIR} ]
then
  echo "ERROR: Project result directory missing - see: ${RESULTS_DIR} "  | tee -a $log
  exit 1
fi
echo ""|tee -a $log
echo "************************************************************************" | tee -a $log
echo "*      SampleID: $sample_id                   "| tee -a $log
echo "*      Project Team: $PROJECT_TEAM_NAME            "| tee -a $log
echo "*      Project Name: $PROJECT_NAME                 "| tee -a $log
echo "*      Organism:       $ORGANISM                   "| tee -a $log
echo "*      Design File:  $DESIGN_FILE                  "| tee -a $log
echo "*      Date:  `date`                  "| tee -a $log
echo "*      Current User: `id -un`                  "| tee -a $log
echo "*      Pipeline Owner: ${PIPELINE_OWNER}                 "| tee -a $log
echo "*      Results Base:  $RESULTS_DIR                "| tee -a $log
echo "*      Cwl Script:$CWL_SCRIPT                  "| tee -a $log
echo "*      Sample Json File:$JSON_FILE                  "| tee -a $log
#
## Checks logs for failure 
function getLogStatus() {
  log=$1
  IFS=""
  rstatus="Success"
  for ((i = 0; i < ${#ERROR_TERMS[@]}; i++))
  do
       error_term=${ERROR_TERMS[$i]}
       error_found=`grep -i $error_term $log `
       if [ "$error_found" != "" ]
       then
            rstatus="Failure"
            echo "Found: \"$error_found\" "   
        fi
  done
  echo "$rstatus" 
}
#
#set path to sample-specific results 
sample_results_dir=$RESULTS_DIR/$sample_id
###############
#
if [ -d $sample_results_dir ]
then
   if [ "$(ls -A $sample_results_dir)" ]
   then
       echo "SKIPPING: Pipeline results directory not empty - check $sample_results_dir" | tee -a $log
       exit 0
   fi
fi
#
[ ! -d $sample_results_dir ] && mkdir -p $sample_results_dir
## Set permissions on newly created directory
chown $CURRENT_USER $sample_results_dir
chmod 775 $sample_results_dir
## Run the command under $results_dir
cd $sample_results_dir
#Command Line
CMD="$CWLTOOL $CWL_COMMAND_OPTIONS ${CWL_SCRIPT} ${JSON_FILE} "
echo "" 
echo "Command Line: $CMD" | tee -a $log
echo "" 
echo "************************************************************************" | tee -a $log
echo ">>> CWLTOOL Logs start here "

$CMD | tee -a $log  2>&1

#
echo ">>> CWLTOOL Logs end here " | tee -a ${log}
echo "Running sanity check" | tee -a ${log}
run_status=`getLogStatus ${log}`
echo "${run_status}" | tee -a $log
[ "${run_status}" != Success ] && exit 1
#
echo "" | tee -a ${log}
echo "Program complete - Check results under $sample_results_dir"| tee -a ${log}   
date
exit 0
